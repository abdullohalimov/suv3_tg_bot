import logging
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
import tgbot.misc.states as states
import tgbot.services.api as api
import tgbot.keyboards.inline as inline
import tgbot.keyboards.reply as reply

user_router = Router()


class StepOne:
    @user_router.message(CommandStart())
    async def user_start(message: Message, state: FSMContext):
        data = await state.get_data()
        if data.get("id_number"):
            await message.answer(
                text="‚úÖ–°–∏–∑ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–≥–∞–Ω—Å–∏–∑.\nüÜî–°–∏–∑–Ω–∏–Ω–≥ <b>ID —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑</b> 202300001.\n\nüé´–ö—É—Ä—Å —è–∫—É–Ω–ª–∞–Ω–≥–∞–Ω–¥–∞–Ω —Å—û–Ω–≥, —à—É –µ—Ä–¥–∞ <b>—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∏–Ω–≥–∏–∑–Ω–∏</b> —é–∫–ª–∞–± –æ–ª–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω",
                reply_markup=await inline.download_cert(),
            )
            await state.set_state(states.UserRegistration.cert)
        else:
            await message.answer(
                text='üì≤ –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ <b>+9989** *** ** **</b> —à–∞–∫–ª–¥–∞ \n—é–±–æ—Ä–∏–Ω–≥, —ë–∫–∏ <b>"üì± –†–∞“õ–∞–º —é–±–æ—Ä–∏—à"</b> —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥:', reply_markup=reply.phone_keyboard()
            )
            await state.set_state(states.UserRegistration.phone)

    class Phone:
        @user_router.message(states.UserRegistration.phone, F.contact.phone_number)
        async def user_contact(message: Message, state: FSMContext):
            await state.update_data(phone=message.contact.phone_number)
            await message.reply(
                text="‚úçüèº <b>–§–∞–º–∏–ª–∏—è, –ò—Å–º, –®–∞—Ä–∏—Ñ</b>–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥.\n<i>–ú–∏—Å–æ–ª —É—á—É–Ω: –£–º–∞—Ä–æ–≤ –ê–∑–∏–∑–±e–∫ –ò–±—Ä–æ“≥–∏–º(–æ–≤–∏—á) —û“ì–ª–∏</i>"
            )
            await state.set_state(states.UserRegistration.fullname)


        @user_router.message(
            states.UserRegistration.phone,
            F.text.replace(" ", "").replace('+', '').regexp(r"^998\d{9}$"),
        )
        async def user_phone_number(message: Message, state: FSMContext):
            await state.update_data(phone=message.text.replace("+", ""))
            await message.reply(
                text="‚úçüèº <b>–§–∞–º–∏–ª–∏—è, –ò—Å–º, –®–∞—Ä–∏—Ñ</b>–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥.\n<i>–ú–∏—Å–æ–ª —É—á—É–Ω: –£–º–∞—Ä–æ–≤ –ê–∑–∏–∑–±e–∫ –ò–±—Ä–æ“≥–∏–º(–æ–≤–∏—á) —û“ì–ª–∏</i>"
            )
            await state.set_state(states.UserRegistration.fullname)


        @user_router.message(states.UserRegistration.phone)
        async def user_number_incorrect(message: Message):
            await message.answer(text="‚ùå  –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑ –Ω–æ—Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞ –∫–∏—Ä–∏—Ç–∏–ª–≥–∞–Ω.\n‚òùÔ∏è –¢e–ªe—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ <b>+9989** *** ** **</b> —à–∞–∫–ª–¥–∞\n —é–±–æ—Ä–∏–Ω–≥, —ë–∫–∏ <b>\"üì± –†–∞“õ–∞–º —é–±–æ—Ä–∏—à\"</b> —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥:")

    @user_router.message(states.UserRegistration.fullname)
    async def user_fullname(message: Message, state: FSMContext):
        if 5 < len(message.text.split()) or len(message.text.split()) < 2:
            await message.answer(
                text="‚úçüèº <b>–§–∞–º–∏–ª–∏—è, –ò—Å–º, –®–∞—Ä–∏—Ñ</b>–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥.\n<i>–ú–∏—Å–æ–ª —É—á—É–Ω: –£–º–∞—Ä–æ–≤ –ê–∑–∏–∑–±e–∫ –ò–±—Ä–æ“≥–∏–º(–æ–≤–∏—á) —û“ì–ª–∏</i>"
            )
        else:
            await state.update_data(fullname=message.text)
            await message.answer(
                text="üìÖ –¢—É“ì–∏–ª–≥–∞–Ω —Å–∞–Ω–∞–Ω–≥–∏–∑–Ω–∏ <b>–∫—É–Ω.–æ–π.–π–∏–ª</b> —Ñ–æ—Ä–º–∞—Ç–∏–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥\n<i>–ú–∏—Å–æ–ª —É—á—É–Ω: 01.01.2000</i>"
            )
            await state.set_state(states.UserRegistration.birthday)

    @user_router.message(
        states.UserRegistration.birthday, F.text.regexp(r"^\d{2}\.\d{2}\.\d{4}$")
    )
    async def user_birthday(message: Message, state: FSMContext):
        await state.update_data(birthday=message.text)
        await message.answer(
            text="üë• –ñ–∏–Ω—Å–∏–Ω–≥–∏–∑:", reply_markup=inline.male_female_keyboard()
        )
        await state.set_state(states.UserRegistration.malefemale)
    
    @user_router.message(states.UserRegistration.birthday)
    async def user_birthday_incorrect(message: Message):
        await message.answer(text="‚ùå  –¢—É“ì–∏–ª–≥–∞–Ω —Å–∞–Ω–∞–Ω–≥–∏–∑–Ω–∏ <b>–∫—É–Ω.–æ–π.–π–∏–ª</b> —Ñ–æ—Ä–º–∞—Ç–∏–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥\n<i>–ú–∏—Å–æ–ª —É—á—É–Ω: 01.01.2000</i>")


class StepTwo:
    @user_router.callback_query(
        inline.Factories.MaleFemale.filter(), states.UserRegistration.malefemale
    )
    async def user_malefemale(
        call: CallbackQuery,
        callback_data: inline.Factories.MaleFemale,
        state: FSMContext,
    ):
        await state.update_data(malefemale=callback_data.id)
        await call.message.edit_text(text="üöú –§–µ—Ä–º–µ—Ä —ë–∫–∏ –¥–µ“≥“õ–æ–Ω —Ö—û–∂–∞–ª–∏–≥–∏ –Ω–æ–º–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥")
        await state.set_state(states.UserRegistration.fermer_xojalik)

    @user_router.message(states.UserRegistration.fermer_xojalik)
    async def user_fermer_xojalik(message: Message, state: FSMContext):
        await state.update_data(fermer_xojalik=message.text)
        await message.answer(
            text="üßë‚Äçüåæ –°–∏–∑–Ω–∏–Ω–≥ –ª–∞–≤–æ–∑–∏–º–∏–Ω–≥–∏–∑", reply_markup=await inline.position_keyboard()
        )
        await state.set_state(states.UserRegistration.position)

    @user_router.callback_query(
        inline.Factories.Position.filter(), states.UserRegistration.position
    )
    async def address(
        call: CallbackQuery, callback_data: inline.Factories.Position, state: FSMContext
    ):
        await state.update_data(lavozim=callback_data.id)
        await call.message.edit_text(
            text="üìç –§–µ—Ä–º–µ—Ä —ë–∫–∏ –¥–µ“≥“õ–æ–Ω —Ö—û–∂–∞–ª–∏–≥–∏ –∂–æ–π–ª–∞—à–≥–∞–Ω “≥—É–¥—É–¥–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥",
            reply_markup=await inline.regions_keyboard(),
        )
        await state.set_state(states.UserRegistration.address_region)

    @user_router.callback_query(
        inline.Factories.Region.filter(), states.UserRegistration.address_region
    )
    async def address_region(
        call: CallbackQuery, callback_data: inline.Factories.Region, state: FSMContext
    ):
        await state.update_data(region=callback_data.id)
        await call.message.edit_text(
            text="üìç –§–µ—Ä–º–µ—Ä —ë–∫–∏ –¥–µ“≥“õ–æ–Ω —Ö—û–∂–∞–ª–∏–≥–∏ –∂–æ–π–ª–∞—à–≥–∞–Ω “≥—É–¥—É–¥–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥",
            reply_markup=await inline.district_keyboard(),
        )
        await state.set_state(states.UserRegistration.address_district)

    @user_router.callback_query(
        inline.Factories.District.filter(), states.UserRegistration.address_district
    )
    async def address_region(
        call: CallbackQuery, callback_data: inline.Factories.District, state: FSMContext
    ):
        await state.update_data(district=callback_data.id)
        await call.message.edit_text(
            text="‚öôÔ∏è –§–µ—Ä–º–µ—Ä –≤–∞ –¥–µ“≥“õ–æ–Ω —Ö—û–∂–∞–ª–∏–≥–∏ —Ñ–∞–æ–ª–∏—è—Ç —Ç—É—Ä–∏",
            reply_markup=await inline.faoliyat_turi_keyboard(),
        )
        await state.set_state(states.UserRegistration.faoliyat_turi)


class StepThree:
    @user_router.callback_query(
        inline.Factories.FaoliyatTuri.filter(), states.UserRegistration.faoliyat_turi
    )
    async def address_region(
        call: CallbackQuery, callback_data: inline.Factories.District, state: FSMContext
    ):
        await state.update_data(faoliyat_turi=callback_data.id, id_number="202300001")
        await call.message.edit_text(
            text="‚úÖ–°–∏–∑ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —û—Ç–¥–∏–Ω–≥–∏–∑.\nüÜî–°–∏–∑–Ω–∏–Ω–≥ <b>ID —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑</b> 202300001.\n\nüé´–ö—É—Ä—Å —è–∫—É–Ω–ª–∞–Ω–≥–∞–Ω–¥–∞–Ω —Å—û–Ω–≥, —à—É –µ—Ä–¥–∞ <b>—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∏–Ω–≥–∏–∑–Ω–∏</b> —é–∫–ª–∞–± –æ–ª–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω",
            reply_markup=await inline.download_cert(),
        )
        await state.set_state(states.UserRegistration.cert)

    @user_router.callback_query(
        inline.Factories.Certificate.filter(), states.UserRegistration.cert
    )
    async def cert_answer(
        call: CallbackQuery,
        callback_data: inline.Factories.Certificate,
        state: FSMContext,
    ):
        await call.answer(
            text="–ö—É—Ä—Å —Ö–∞–ª–∏ —è–∫—É–Ω–ª–∞–Ω–º–∞–≥–∞–Ω\n–ö—É—Ä—Å —è–∫—É–Ω–ª–∞–Ω–≥–∞–Ω–¥–∞–Ω —Å—û–Ω–≥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∏–Ω–≥–∏–∑–Ω–∏ —é–∫–ª–∞–± –æ–ª–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω ",
            show_alert=True,
        )
